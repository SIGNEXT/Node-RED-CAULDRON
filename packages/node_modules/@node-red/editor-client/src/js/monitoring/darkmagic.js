RED.monitoring = (function () {
    var data = {};
    var settings = {
        graphicPointsDisplayed: 10
    };

    function darkmagic() {
        RED.nodes.eachNode(initMonitoringNodeData);

        injectHTMLIntoNode();

        RED.monitoring.view.addMonitoringModal();

        subscribeNodeCreate();

        subscribeWorkspaceChange();

        subscribeMonitoring();
    }

    function subscribeNodeCreate() {
        RED.events.on('nodes:add', function (node) {
            var observer = new MutationObserver(function (mutations, me) {
                var nodeElement = document.getElementById(node.id);
                if (nodeElement) {
                    initMonitoringNodeData(node);
                    RED.monitoring.view.injectHTMLIntoNode(node.id, node.tostatus);
                    me.disconnect(); // stop observing
                }
            });

            // start observing
            observer.observe(document, {
                childList: true,
                subtree: true
            });
        });
    }

    function initMonitoringNodeData(node) {
        //msg: {x: timestamp, y:value, type: type, id: _msgid}
        data[node.id] = {
            input: [],
            output: [],
            settings: {
                defaultMessages: (node.inputs == 0 ? 'output' : 'input'),
                portNumber: 0,
                enableGraphic: true,
                pauseDebug: false
            }
        };
    }

    function injectHTMLIntoNode() {
        RED.view.getActiveNodes().forEach(function (node) {
            RED.monitoring.view.injectHTMLIntoNode(node.id, node.tostatus);
        });
    }

    function subscribeWorkspaceChange() {
        RED.events.on('workspace:change', function (workspace) {
            injectHTMLIntoNode();
        });
    }

    function subscribeMonitoring() {
        RED.comms.subscribe('monitoring', function (topic, event) {
            processMessage(event);
        });

        RED.comms.subscribe('breakpoint', function (topic, event) {
            breakpointSystem(event);
        });

        RED.comms.subscribe('debug', function (topic, event) {
            enhanceDebugNode(event);
        });
    }

    function enhanceDebugNode(event) {
        var nodeId = event.id;
        var value = event.msg;
        var format = event.format;
        var timestamp = new Date();
        if (format == 'number' || format == 'Object')
            value = JSON.parse(value);

        var lastMessage = RED.monitoring.data[nodeId].input.slice(-1)[0];
        if (lastMessage && typeof (lastMessage.y) != typeof (value)) clearMessages(nodeId);

        data[nodeId]['input'].push({x: timestamp, y: value, type: typeof (value)});
        RED.monitoring.view.updateHTMLNode(nodeId, value, timestamp, 'input', 0);
    }

    function processMessage(event) {
        var nodeId = event.id;
        if (RED.nodes.node(nodeId).type == 'debug') return;

        var dataReceived = event.value;
        var eventType = event.type;
        var timestamp = new Date();

        if (Array.isArray(dataReceived)) {
            dataReceived.map(function (msg, index) {
                if (!msg) return;

                if (!data[nodeId][eventType][index]) data[nodeId][eventType][index] = [];

                if (Array.isArray(msg)) {
                    msg.map(function (el) {
                        var value = el.payload;
                        if (!value) return;
                        // if(el.receivedTimestamp) timestamp = new Date(el.receivedTimestamp);
                        data[nodeId][eventType][index].push({
                            x: timestamp,
                            y: value,
                            type: typeof (value),
                            id: el._msgid
                        });
                        RED.monitoring.view.updateHTMLNode(nodeId, value, timestamp, eventType, index);
                    });
                } else {
                    var value = msg.payload;
                    if (!value) return;
                    // if(msg.receivedTimestamp) timestamp = new Date(msg.receivedTimestamp);
                    data[nodeId][eventType][index].push({x: timestamp, y: value, type: typeof (value), id: msg._msgid});
                    RED.monitoring.view.updateHTMLNode(nodeId, value, timestamp, eventType, index);
                }
            });
        } else {
            var value = dataReceived.payload;
            if (!value) return;
            // if(dataReceived.receivedTimestamp) timestamp = new Date(dataReceived.receivedTimestamp);
            if (eventType == 'input')
                data[nodeId][eventType].push({x: timestamp, y: value, type: typeof (value), id: dataReceived._msgid});
            else {
                if (!data[nodeId][eventType][0]) data[nodeId][eventType][0] = [];
                data[nodeId][eventType][0].push({
                    x: timestamp,
                    y: value,
                    type: typeof (value),
                    id: dataReceived._msgid
                });
            }

            RED.monitoring.view.updateHTMLNode(nodeId, value, timestamp, eventType, 0);
        }
    }

    function clearMessages(nodeId) {
        data[nodeId].input = [];
        data[nodeId].output = [];
    }

    function breakpointSystem(event) {
        switch (event.type) {
            case 'empty_queue':
                RED.monitoring.view.clearHTMLNodeMessages(event.id);
                break;
        }
    }

    return {
        darkmagic: darkmagic,
        data: data,
        settings: settings,
        clearMessages: clearMessages
    }
})();