RED.monitoring = (function () {
    var data = {};

    function darkmagic() {
        initMonitoringNodeOnCreate();

        RED.nodes.eachNode(initMonitoringNode);

        subscribeMonitoring();

        RED.monitoring.view.addMonitoringModal();
    }

    function initMonitoringNodeOnCreate() {
        RED.events.on('nodes:add', function (node) {
            var observer = new MutationObserver(function (mutations, me) {
                var nodeElement = document.getElementById(node.id);
                if (nodeElement) {
                    initMonitoringNode(node);
                    me.disconnect(); // stop observing
                    return;
                }
            });

            // start observing
            observer.observe(document, {
                childList: true,
                subtree: true
            });
        });
    }

    function initMonitoringNode(node) {
        //msg: {x: timestamp, y:value, type: type}
        data[node.id] = {
            input: [],
            output: [],
            settings: {
                defaultMessages: 'input',
                portNumber: 0,
                enableGraphic: false,
            }
        };

        RED.monitoring.view.injectHTMLIntoNode(node.id, node.tostatus);
    }

    function subscribeMonitoring() {
        RED.comms.subscribe('monitoring', function (topic, event) {
            var nodeId = event.id;
            var dataReceived = event.value;
            var eventType = event.type;
            var timestamp = new Date();

            if (Array.isArray(dataReceived)) {
                dataReceived.map(function (msg, index) {
                    if (!msg) return;

                    if (!data[nodeId][eventType][index]) data[nodeId][eventType][index] = [];

                    if (Array.isArray(msg)) {
                        msg.map(function (el) {
                            var value = el.payload;
                            if (!value) return;
                            data[nodeId][eventType][index].push({x: timestamp, y: value, type: typeof (value)});
                            RED.monitoring.view.updateHTMLNode(nodeId, value, timestamp, eventType, index);
                        });
                    } else {
                        var value = msg.payload;
                        if (!value) return;
                        data[nodeId][eventType][index].push({x: timestamp, y: value, type: typeof (value)});
                        RED.monitoring.view.updateHTMLNode(nodeId, value, timestamp, eventType, index);
                    }
                });
            } else {
                var value = dataReceived.payload;
                if (!value) return;
                data[nodeId][eventType].push({x: timestamp, y: value, type: typeof (value)});
                RED.monitoring.view.updateHTMLNode(nodeId, value, timestamp, eventType, 0);
            }
        });
    }

    return {
        darkmagic: darkmagic,
        data: data
    }
})();