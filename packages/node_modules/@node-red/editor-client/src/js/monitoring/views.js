RED.monitoring.view = (function () {

    function injectHTMLIntoNode(nodeId) {
        var nodeElement = document.getElementById(nodeId);
        var foreign = document.createElementNS('http://www.w3.org/2000/svg', "foreignObject");
        foreign.setAttribute('id', 'foreignObject-' + nodeId);
        foreign.setAttribute('width', nodeElement.querySelector(".red-ui-flow-node").getAttribute('width'));
        foreign.setAttribute('height', 400); //TODO: Change this value bc bugs
        foreign.setAttribute('x', 0);
        foreign.setAttribute('y', 0);

        var buttonDiv = document.createElement('div');
        buttonDiv.innerHTML = '<i id="toggleMonitoring-' + nodeId + '"style="float:right; padding-top: 0.5em; padding-right: 0.5em;" class="fa fa-bug"></i>'

        var iDiv = document.createElement('div');
        iDiv.setAttribute('id', 'monitoring-' + nodeId);
        iDiv.setAttribute('class', 'monitoring-div');
        iDiv.style.display = 'none';

        //Div with node data
        iDiv.innerHTML += '<div class="monitoring-data" style="padding-top: 0.2em;">' +
            '<div class="monitoring-messages">' +
            '<span>Messages:</span>' + '<i id="expand-' + nodeId + '"style="float:right; padding-top: 0.3em; padding-right: 0.3em;" class="fa fa-external-link"></i>' +
            '<div class="monitoring-values" style="padding-left: 0.7em;"></div>' +
            '</div>' +
            '<div class="monitoring-graphics" style="display: none;">' +
            '<span>Show Graphic:</span><input style="float: right; margin-right: 0.3em;" type="checkbox" id="checkbox-graphic' + nodeId + '"></input>' +
            '<div style="display: none; padding-left: 0.5em; padding-right: 0.5em;"><span></span><canvas id="chart-' + nodeId + '" height="50"></canvas></div>' +
            '</div>' +
            '<div class="inject-message">' +
            '<span> Inject msg: </span><i id="inject-' + nodeId + '"style="float:right; padding-top: 0.2em; padding-right: 0.3em;" class="fa fa-paper-plane"></i></div>' +
            '</div>' +
            '<div class="breakpoint">' +
            '<span> Breakpoint:  </span>' +
            '<i id="step-' + nodeId + '"style="float:right; padding-top: 0.2em; padding-right: 0.3em;" class="fa fa-step-forward"></i>' +
            '<i id="playPause-' + nodeId + '"style="float:right; padding-top: 0.2em; padding-right: 0.3em;" class="fa fa-pause"></i>' +
            '<i id="clear-' + nodeId + '"style="float:right; padding-top: 0.2em; padding-right: 0.3em;" class="fa fa-trash"></i>' +
            '</div></div>';

        foreign.appendChild(buttonDiv);
        foreign.appendChild(iDiv);
        nodeElement.appendChild(foreign);

        document.getElementById('toggleMonitoring-' + nodeId).addEventListener('click', toggleMonitoring.bind(null, nodeId));
        document.getElementById('checkbox-graphic' + nodeId).addEventListener('change', toggleGraphic.bind(null, iDiv));
        document.getElementById('expand-' + nodeId).addEventListener('click', openLastMessages.bind(null, nodeId));
        document.getElementById('inject-' + nodeId).addEventListener('click', openInjectMessageModal.bind(null, nodeId));

        document.getElementById('clear-' + nodeId).addEventListener('click', clearBreakpoint.bind(null, nodeId));
        document.getElementById('playPause-' + nodeId).addEventListener('click', playPauseBreakpoint.bind(null, nodeId));
        document.getElementById('step-' + nodeId).addEventListener('click', stepBreakpoint.bind(null, nodeId));
    }

    function toggleMonitoring(nodeId, event) {
        var nodeDataDiv = document.getElementById('monitoring-' + nodeId);

        nodeDataDiv.style.display = (nodeDataDiv.style.display == 'none' ? '' : 'none');
    }

    function addMonitoringModal() {
        var monitoringModal = document.createElement('div');
        monitoringModal.setAttribute('id', 'monitoringModal');
        monitoringModal.setAttribute('class', 'modal');
        monitoringModal.innerHTML = '<div class="modal-content"><span class="close">&times;</span><div></div></div>';

        document.body.appendChild(monitoringModal);

        document.getElementsByClassName('close')[0].addEventListener('click', function () {
            monitoringModal.style.display = 'none';
        });

        window.onclick = function (event) {
            if (event.target == monitoringModal) {
                monitoringModal.style.display = 'none';
            }
        }
    }

    function openMonitoringModal() {
        var monitoringModal = document.getElementById('monitoringModal');
        monitoringModal.style.display = 'block';

        return monitoringModal.querySelector('.modal-content div');
    }

    function openConfigModal(nodeId) { //TODO: Update later
        var content = openMonitoringModal();
        var currentNode = RED.nodes.node(nodeId);
        var settings = RED.monitoring.data[nodeId].settings;
        content.innerHTML = '<h2>Node: ' + nodeId + '</h2><h3>Configs</h3>' +
            '<div><label>Default Message: </label><select name="defaultMessage">' +
            '<option value="input" ' + (settings.defaultMessages == 'input' ? 'selected' : '') + '>Input</option>' +
            '<option value="output" ' + (settings.defaultMessages == 'output' ? 'selected' : '') + '>Output</option>' +
            '</select>' +
            '<label style="margin-left: 0.3em;">Port Number:</label><input type="number" name="portNumber" style="width: 3em" min="0" max="' +
            (settings.defaultMessages == 'input' ? currentNode.inputs - 1 : currentNode.outputs - 1) + '" value="' + settings.portNumber + '">' +
            '</div><br>' +

            '<div><label>Graphics Enabled:</label><input type="checkbox" ' + (settings.enableGraphic ? 'checked' : '') + '></div><br>' +
            '<div style="text-align: center;"><button type="submit">Clear Data</button></div>';

        document.querySelector('.modal-content select').addEventListener('change', function (event) {
            RED.monitoring.data[nodeId].settings.defaultMessages = event.target.value;
            clearHTMLNodeMessages(nodeId);
        });

        document.querySelector('.modal-content input[type="number"]').addEventListener('change', function (event) {
            RED.monitoring.data[nodeId].settings.portNumber = event.target.value;
        });

        document.querySelector('.modal-content input[type="checkbox"]').addEventListener('change', function (event) {
            RED.monitoring.data[nodeId].settings.enableGraphic = event.target.checked;
        });

        document.querySelector('.modal-content button').addEventListener('click', function (event) {
            RED.monitoring.data[nodeId].input = [];
            RED.monitoring.data[nodeId].output = [];
            clearHTMLNodeMessages(nodeId);
        });
    }

    function openInjectMessageModal(nodeId) {
        var content = openMonitoringModal();
        content.innerHTML = '<h2>Node: ' + nodeId + '</h2><h3>Inject Message</h3>' +
            '<div><label>MSG:</label><input type="text"><button type="submit">Send!</button></div>';

        var inputMessage = document.querySelector('.modal-content input');

        document.querySelector('.modal-content button').addEventListener('click', function (event) {
            var injectMessage = {
                _msgid: (1 + Math.random() * 4294967295).toString(16),
                topic: '',
                payload: inputMessage.value
            };

            RED.nodes.sendMessage(nodeId, injectMessage, 'debug');
            monitoringModal.style.display = 'none';
        });
    }

    function playPauseBreakpoint(nodeId) {
        RED.nodes.sendMessage(nodeId, null, 'breakpoint', 'play/pause');
    }


    function stepBreakpoint(nodeId) {
        RED.nodes.sendMessage(nodeId, null, 'breakpoint', 'step');
    }

    function clearBreakpoint(nodeId) {
        RED.nodes.sendMessage(nodeId, null, 'breakpoint', 'clear');
    }

    function toggleGraphic(monitoringDiv, event) {
        var nodeDataDiv = monitoringDiv.querySelector('.monitoring-data .monitoring-graphics div');
        if (event.target.checked) {
            nodeDataDiv.style.display = '';
        } else {
            nodeDataDiv.style.display = 'none';
        }
    }

    function openLastMessages(nodeId) {
        var win = window.open('', '', 'width=500,height=400,top=' + (screen.height / 3) + ',left=' + (screen.width / 3));
        win.document.body.innerHTML = '<div class="monitoring-data">' +
            '<h1>Node: ' + nodeId + '</h1><h2> Last Messages:</h2>' +
            '<div class="monitoring-values-input"><ul style="max-height:250px;overflow:auto;"><h3>Input 0</h3></ul></div>' +
            '<div class="monitoring-values-output"><ul style="max-height:250px;overflow:auto;"></ul></div>' +
            '</div>';

        var nodeDataDiv = win.document.querySelector('.monitoring-data');

        RED.monitoring.data[nodeId].input.map(function (message) {
            nodeDataDiv.querySelector('.monitoring-values-input ul').innerHTML += '<li>' +
                convertMessageToHTML(message) + '</li>';
        });

        RED.monitoring.data[nodeId].output.map(function (outputMessages, outputNumber) {
            nodeDataDiv.querySelector('.monitoring-values-output ul').innerHTML += '<h3>Output ' + outputNumber + '</h3>'
            outputMessages.map(function (message) {
                nodeDataDiv.querySelector('.monitoring-values-output ul').innerHTML += '<li>' +
                    convertMessageToHTML(message) + '</li>';
            });
        })
    }

    function convertMessageToHTML(message) {
        return '<span>Value: ' + message.y + '</span> - ' + '<span>Time: ' + message.x.toLocaleString() + '</span>';
    }

    function checkUserNodeConfigs(nodeId, eventType, portNumber) {
        var nodeSettings = RED.monitoring.data[nodeId].settings;

        return nodeSettings.defaultMessages == eventType && nodeSettings.portNumber == portNumber;
    }

    function clearHTMLNodeMessages(nodeId) {
        var nodeDataDiv = document.getElementById('monitoring-' + nodeId).querySelector('.monitoring-data');
        var valuesDiv = nodeDataDiv.querySelector('.monitoring-values');
        valuesDiv.innerHTML = '';
    }

    function updateHTMLNode(nodeId, value, timestamp, eventType, portNumber) {
        var nodeDataDiv = document.getElementById('monitoring-' + nodeId).querySelector('.monitoring-data');
        var valuesDiv = nodeDataDiv.querySelector('.monitoring-values');
        var graphicDiv = nodeDataDiv.querySelector('.monitoring-graphics');

        if (!checkUserNodeConfigs(nodeId, eventType, portNumber)) return;

        valuesDiv.innerHTML =
            '<span>Time: ' + timestamp.toLocaleTimeString() + '</span><br>' +
            '<span>Value: ' + value + '</span>';

        if (RED.monitoring.data[nodeId].settings.enableGraphic) {
            graphicDiv.style.display = '';
            drawGraphic(nodeId, graphicDiv);
        }
    }

    function drawGraphic(nodeId, graphicDiv) {
        var nodeSettings = RED.monitoring.data[nodeId].settings;
        var data = RED.monitoring.data[nodeId][nodeSettings.defaultMessages];

        var values = (Array.isArray(data[0]) ? data[nodeSettings.portNumber] : data);

        var graphicElement = document.getElementById("chart-" + nodeId);
        var ctx = graphicElement.getContext('2d');

        if (!(values[0] && typeof (values[0].y) == 'number')) {
            graphicDiv.querySelector('div').querySelector('span').innerHTML = 'The current values are not numbers!';
            graphicElement.style.display = 'none';
            return;
        }

        new Chart(ctx, {
            type: 'scatter',
            data: {
                datasets: [{
                    backgroundColor: 'rgb(255, 99, 132)',
                    borderColor: 'rgb(255, 99, 132)',
                    data: values.map(function(value) { return {x: value.x, y: value.y}}).slice(values.length-10, values.length)
                }]
            },
            options: {
                elements: {
                    point: {
                        pointStyle: 'rectRot',
                    }
                },
                animation: {
                    duration: 0
                },
                legend: {
                    display: false,
                },
                scales: {
                    xAxes: [{
                        type: 'time',
                        distribution: 'series',
                        time: {
                            unit: 'second'
                        },
                        ticks: {
                            display: false
                        },
                        display: false
                        
                    }],
                    yAxes: [{
                        ticks: {
                            display: false
                        },
                        display: false
                    }]
                }
            }
        });
    }

    return {
        injectHTMLIntoNode: injectHTMLIntoNode,
        updateHTMLNode: updateHTMLNode,
        addMonitoringModal: addMonitoringModal
    }
})();