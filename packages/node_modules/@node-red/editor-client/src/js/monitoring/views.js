RED.monitoring.view = (function () {

    function injectHTMLIntoNode(nodeId, toStatus) {
        var nodeElement = document.getElementById(nodeId);
        var foreign = document.createElementNS('http://www.w3.org/2000/svg', "foreignObject");
        foreign.setAttribute('width', nodeElement.querySelector(".red-ui-flow-node").getAttribute('width'));
        foreign.setAttribute('height', 400);
        foreign.setAttribute('x', 0);
        foreign.setAttribute('y', 30 + (toStatus ? 15 : 0));

        var iDiv = document.createElement('div');
        iDiv.setAttribute('id', "monitoring-" + nodeId);
        iDiv.setAttribute('style', "border:1px green solid;");

        //Div with monitoring toggle
        iDiv.innerHTML = '<div class="monitoring-toggle"><span>Monitor: </span>' +
            '<input style="float: right; margin-right: 0.3em;" type="checkbox" id="checkbox-' + nodeId + '"></input>' +
            '</div>';

        //Div with node data
        iDiv.innerHTML += '<div class="monitoring-data" style="display: none; padding-top: 0.2em;">' +
            '<span>Messages:</span>' + '<i id="expand-' + nodeId + '"style="float:right; padding-top: 0.3em; padding-right: 0.3em;" class="fa fa-external-link"></i>' +
            '<div class="monitoring-values-input" style="padding-left: 1em;">Input: <div></div></div>' +
            '<div class="monitoring-values-output" style="padding-left: 1em;">Outputs: <div></div></div>' +
            '<div class="monitoring-graphics" style="display=none;"><span> Show Graphic:</span><input style="float: right; margin-right: 0.3em;" type="checkbox" id="checkbox-graphic' + nodeId + '"></input><canvas style="display: none;" id="chart-' + nodeId + '" width="' + foreign.getAttribute('width') + '" height="150"></canvas></div>' +
            '<div class="inject-message"><span> Inject msg: </span><i id="inject-' + nodeId + '"style="float:right; padding-top: 0.2em; padding-right: 0.3em;" class="fa fa-paper-plane"></i></div>' +
            '</div>';

        foreign.appendChild(iDiv);
        nodeElement.appendChild(foreign);

        document.getElementById("checkbox-" + nodeId).addEventListener('change', toggleMonitoring.bind(null, iDiv));
        document.getElementById("checkbox-graphic" + nodeId).addEventListener('change', toggleGraphic.bind(null, iDiv));
        document.getElementById("expand-" + nodeId).addEventListener('click', openLastMessages.bind(null, nodeId));
        document.getElementById("inject-" + nodeId).addEventListener('click', openInjectMessageModal.bind(null, nodeId));
    }

    function addMonitoringModal() {
        var monitoringModal = document.createElement('div');
        monitoringModal.setAttribute('id', "monitoringModal");
        monitoringModal.setAttribute('class', "modal");
        monitoringModal.innerHTML = '<div class="modal-content"><span class="close">&times;</span><div></div></div>';

        document.body.appendChild(monitoringModal);

        document.getElementsByClassName("close")[0].addEventListener('click', function () {
            monitoringModal.style.display = "none";
        });

        window.onclick = function (event) {
            if (event.target == monitoringModal) {
                monitoringModal.style.display = "none";
            }
        }
    }

    function openInjectMessageModal(nodeId) {
        var monitoringModal = document.getElementById("monitoringModal");
        monitoringModal.style.display = "block";

        var content = monitoringModal.querySelector(".modal-content div");
        content.innerHTML = '<h2>Node: ' + nodeId + '</h2><h3> Inject Message </h3>' +
            '<label>MSG: </label> <input type="text"><button type="submit">Send!</button></div>';

        var inputMessage = document.querySelector(".modal-content input");

        document.querySelector(".modal-content button").addEventListener('click', function (event) {
            RED.nodes.sendMessage(nodeId, inputMessage.value);
            monitoringModal.style.display = "none";
        });
    }

    function toggleMonitoring(monitoringDiv, event) {
        var nodeDataDiv = monitoringDiv.querySelector(".monitoring-data");
        if (event.target.checked) {
            nodeDataDiv.setAttribute("style", "");
        } else {
            nodeDataDiv.setAttribute("style", "display: none");
        }
    }

    function toggleGraphic(monitoringDiv, event) {
        var nodeDataDiv = monitoringDiv.querySelector(".monitoring-data .monitoring-graphics canvas");
        if (event.target.checked) {
            nodeDataDiv.setAttribute("style", "");
        } else {
            nodeDataDiv.setAttribute("style", "display: none");
        }
    }

    function openLastMessages(nodeId) {
        var win = window.open("", "", "width=500,height=400,top=" + (screen.height / 3) + ",left=" + (screen.width / 3));
        win.document.body.innerHTML = '<div class="monitoring-data">' +
            '<h1>Node: ' + nodeId + '</h1><h2> Last Messages:</h2>' +
            '<div class="monitoring-values-input"><ul style="max-height:250px;overflow:auto;"></ul></div>' +
            '<div class="monitoring-values-output"><ul style="max-height:250px;overflow:auto;"></ul></div>' +
            '</div>';

        var nodeDataDiv = win.document.querySelector(".monitoring-data");

        RED.monitoring.data[nodeId].input.map(function (element) {
            nodeDataDiv.querySelector(".monitoring-values-input ul").innerHTML += '<li>' +
                '<span>Value: ' + element.y + '</span> - ' +
                '<span>Time: ' + element.x.toLocaleString() + '</span>' +
                '</li>';
        });

        RED.monitoring.data[nodeId].output.map(function (outputMessages, outputNumber) {
            outputMessages.map(function (element) {
                nodeDataDiv.querySelector(".monitoring-values-output ul").innerHTML += '<li>' +
                    '<span>Output: ' + outputNumber + '</span> - ' +
                    '<span>Value: ' + element.y + '</span> - ' +
                    '<span>Time: ' + element.x.toLocaleString() + '</span>' +
                    '</li>';
            });
        })
    }

    function updateHTMLNode(nodeId, value, timestamp, eventType) {
        var nodeDataDiv = document.getElementById("monitoring-" + nodeId).querySelector(".monitoring-data");
        var valuesDiv = nodeDataDiv.querySelector(".monitoring-values-" + eventType + " div");
        var graphicDiv = nodeDataDiv.querySelector(".monitoring-graphics");
        if (!value) return;

        valuesDiv.innerHTML =
            '<span>Time: ' + timestamp.toLocaleTimeString() + '</span><br>' +
            '<span>Value: ' + value + '</span>';

        if (eventType == 'output' && typeof (value) == "number") {
            graphicDiv.style.display = "";
            drawGraphic(nodeId)
        }
    }

    function drawGraphic(nodeId) {
        var graphicElement = document.getElementById("chart-" + nodeId);
        // graphicElement.setAttribute("style", "");
        var ctx = graphicElement.getContext('2d');

        var data = RED.monitoring.data;
        var values = (Array.isArray(data[nodeId].output[0]) ? data[nodeId].output[0] : data[nodeId].output);

        new Chart(ctx, {
            type: 'line',
            data: {
                labels: values.map(function (value) {
                    return value.x;
                }),
                datasets: [{
                    label: 'Value',
                    backgroundColor: 'rgb(255, 99, 132)',
                    borderColor: 'rgb(255, 99, 132)',
                    data: values.map(function (value) {
                        return value.y;
                    })
                }]
            },
            options: {
                animation: {
                    duration: 0
                },
                legend: {
                    display: false,
                },
                scales: {
                    xAxes: [{
                        type: 'time',
                        distribution: 'series',
                        time: {
                            unit: 'second'
                        }
                    }]
                }
            }
        });
    }

    return {
        injectHTMLIntoNode: injectHTMLIntoNode,
        updateHTMLNode: updateHTMLNode,
        addMonitoringModal: addMonitoringModal
    }
})();