RED.monitoring.view = (function () {

    function injectHTMLIntoNode(nodeId) {
        injectMonitoringButton(nodeId);

        injectMonitoringDetails(nodeId);
    }

    function injectMonitoringButton(nodeId) {
        var nodeElement = document.getElementById(nodeId);
        var nodeWidth = nodeElement.querySelector('.red-ui-flow-node').getAttribute('width');
        var rightGroup = nodeElement.querySelector('g .red-ui-flow-node-icon-group-right');

        var monitoringForeign = document.createElementNS('http://www.w3.org/2000/svg', 'foreignObject');
        monitoringForeign.setAttribute('id', 'monitoringButton-' + nodeId);
        monitoringForeign.setAttribute('width', 28);
        monitoringForeign.setAttribute('height', 28);
        monitoringForeign.setAttribute('x', (rightGroup == null ? nodeWidth - 30 : 9));
        monitoringForeign.setAttribute('y', 0.5);

        var buttonDiv = document.createElement('div');
        var nodeColor = nodeElement.querySelector('.red-ui-flow-node').attributes.fill.value; 
        
        buttonDiv.style = 'width: 20px; height: 28px;background: '+nodeColor+'; margin-left:0.3em'; 
        buttonDiv.innerHTML = '<i id="toggleMonitoring-' + nodeId + '" style="padding-top: 0.4em;" class="fa fa-bug"></i>';

        monitoringForeign.appendChild(buttonDiv);
        nodeElement.appendChild(monitoringForeign);

        document.getElementById('toggleMonitoring-' + nodeId).addEventListener('click', toggleMonitoring.bind(null, nodeId));
    }

    function injectMonitoringDetails(nodeId) {
        var nodeElement = document.getElementById(nodeId);
        var nodeWidth = nodeElement.querySelector('.red-ui-flow-node').getAttribute('width');

        var monitoringDetailsForeign = document.createElementNS('http://www.w3.org/2000/svg', 'foreignObject');
        monitoringDetailsForeign.setAttribute('id', 'monitoringDetails-' + nodeId);
        monitoringDetailsForeign.setAttribute('width', nodeWidth);
        monitoringDetailsForeign.setAttribute('height', 80);
        monitoringDetailsForeign.setAttribute('x', 0);
        monitoringDetailsForeign.setAttribute('y', 30);

        var iDiv = document.createElement('div');
        iDiv.setAttribute('id', 'monitoring-' + nodeId);
        iDiv.setAttribute('class', 'monitoring-div');
        iDiv.style.display = 'none';

        iDiv.innerHTML += '<div class="monitoring-graphics" style="padding-bottom: 0.5em;">' +
            '<div style="padding-left: 0.5em; padding-right: 0.5em;"><canvas id="chart-' + nodeId + '"width="' + nodeWidth + '" height="35"></canvas></div>' +
            '</div>' +

            '<div style="display: flex; justify-content: center;"><i id="toggleMonitoringDetails-' + nodeId + '" class="fa fa-chevron-down"></i></div>' +

            '<div class="monitoring-details" style="display: none; padding-top: 0.2em;">' +
            '<div class="monitoring-messages">' +
            '<span>Messages:</span>' + '<i id="expand-' + nodeId + '"style="float:right; padding-top: 0.3em; padding-right: 0.3em;" class="fa fa-external-link"></i>' +
            '<div class="monitoring-values" style="padding-left: 0.7em;"></div>' +
            '</div>' +
            '<div class="inject-message">' +
            '<span> Inject msg: </span><i id="inject-' + nodeId + '"style="float:right; padding-top: 0.2em; padding-right: 0.3em;" class="fa fa-paper-plane"></i>' +
            '</div>' +
            '<div class="breakpoint">' +
            '<span> Breakpoint:  </span>' +
            '<i id="step-' + nodeId + '"style="float:right; padding-top: 0.2em; padding-right: 0.3em;" class="fa fa-step-forward"></i>' +
            '<i id="playPause-' + nodeId + '"style="float:right; padding-top: 0.2em; padding-right: 0.3em;" class="fa fa-pause"></i>' +
            '<i id="clear-' + nodeId + '"style="float:right; padding-top: 0.2em; padding-right: 0.3em;" class="fa fa-trash"></i>' +
            '</div>' +
            '</div>';

        monitoringDetailsForeign.appendChild(iDiv);
        nodeElement.appendChild(monitoringDetailsForeign);

        document.getElementById('toggleMonitoringDetails-' + nodeId).addEventListener('click', toggleMonitoringDetails.bind(null, nodeId));
        document.getElementById('expand-' + nodeId).addEventListener('click', openLastMessages.bind(null, nodeId));
        document.getElementById('inject-' + nodeId).addEventListener('click', openInjectMessageModal.bind(null, nodeId));

        document.getElementById('clear-' + nodeId).addEventListener('click', clearBreakpoint.bind(null, nodeId));
        document.getElementById('playPause-' + nodeId).addEventListener('click', playPauseBreakpoint.bind(null, nodeId));
        document.getElementById('step-' + nodeId).addEventListener('click', stepBreakpoint.bind(null, nodeId));
    }

    function toggleMonitoring(nodeId, event) {
        var nodeDataDiv = document.getElementById('monitoring-' + nodeId);

        nodeDataDiv.style.display = (nodeDataDiv.style.display == 'none' ? '' : 'none');

        var monitoringDetailsForeign = document.getElementById('monitoringDetails-' + nodeId);
        monitoringDetailsForeign.setAttribute('height', (nodeDataDiv.style.display == 'none' ? 0 : 80));
    }

    function toggleMonitoringDetails(nodeId, event) {
        var nodeDataDiv = document.getElementById('monitoring-' + nodeId).querySelector('.monitoring-details');

        nodeDataDiv.style.display = (nodeDataDiv.style.display == 'none' ? '' : 'none');

        var monitoringDetailsForeign = document.getElementById('monitoringDetails-' + nodeId);
        monitoringDetailsForeign.setAttribute('height', (nodeDataDiv.style.display == 'none' ? 80 : 180));
    }

    function addMonitoringModal() {
        var monitoringModal = document.createElement('div');
        monitoringModal.setAttribute('id', 'monitoringModal');
        monitoringModal.setAttribute('class', 'modal');
        monitoringModal.innerHTML = '<div class="modal-content"><span class="close">&times;</span><div></div></div>';

        document.body.appendChild(monitoringModal);

        document.getElementsByClassName('close')[0].addEventListener('click', function () {
            monitoringModal.style.display = 'none';
        });

        window.onclick = function (event) {
            if (event.target == monitoringModal) {
                monitoringModal.style.display = 'none';
            }
        }
    }

    function openMonitoringModal() {
        var monitoringModal = document.getElementById('monitoringModal');
        monitoringModal.style.display = 'block';

        return monitoringModal.querySelector('.modal-content div');
    }

    function openInjectMessageModal(nodeId) {
        var content = openMonitoringModal();
        content.innerHTML = '<h2>Node: ' + nodeId + '</h2><h3>Inject Message</h3>' +
            '<div><label>MSG:</label><input type="text"><button type="submit">Send!</button></div>';

        var inputMessage = document.querySelector('.modal-content input');

        document.querySelector('.modal-content button').addEventListener('click', function (event) {
            var injectMessage = {
                _msgid: (1 + Math.random() * 4294967295).toString(16),
                topic: '',
                payload: inputMessage.value
            };

            RED.nodes.sendMessage(nodeId, injectMessage, 'debug');
            monitoringModal.style.display = 'none';
        });
    }

    function playPauseBreakpoint(nodeId) {
        RED.nodes.sendMessage(nodeId, null, 'breakpoint', 'play/pause');
    }


    function stepBreakpoint(nodeId) {
        RED.nodes.sendMessage(nodeId, null, 'breakpoint', 'step');
    }

    function clearBreakpoint(nodeId) {
        RED.nodes.sendMessage(nodeId, null, 'breakpoint', 'clear');
    }

    function openLastMessages(nodeId) {
        var win = window.open('', '', 'width=500,height=400,top=' + (screen.height / 3) + ',left=' + (screen.width / 3));
        win.document.body.innerHTML = '<div class="monitoring-data">' +
            '<h1>Node: ' + nodeId + '</h1><h2> Last Messages:</h2>' +
            '<div class="monitoring-values-input"><ul style="max-height:250px;overflow:auto;"><h3>Input 0</h3></ul></div>' +
            '<div class="monitoring-values-output"><ul style="max-height:250px;overflow:auto;"></ul></div>' +
            '</div>';

        var nodeDataDiv = win.document.querySelector('.monitoring-data');

        RED.monitoring.data[nodeId].input.map(function (message) {
            nodeDataDiv.querySelector('.monitoring-values-input ul').innerHTML += '<li>' +
                convertMessageToHTML(message) + '</li>';
        });

        RED.monitoring.data[nodeId].output.map(function (outputMessages, outputNumber) {
            nodeDataDiv.querySelector('.monitoring-values-output ul').innerHTML += '<h3>Output ' + outputNumber + '</h3>';
            outputMessages.map(function (message) {
                nodeDataDiv.querySelector('.monitoring-values-output ul').innerHTML += '<li>' +
                    convertMessageToHTML(message) + '</li>';
            });
        })
    }

    function convertMessageToHTML(message) {
        return '<span>Value: ' + message.y + '</span> - ' + '<span>Time: ' + message.x.toLocaleString() + '</span>';
    }

    function checkUserNodeConfigs(nodeId, eventType, portNumber) {
        var nodeSettings = RED.monitoring.data[nodeId].settings;

        return nodeSettings.defaultMessages == eventType && nodeSettings.portNumber == portNumber;
    }

    function clearHTMLNodeMessages(nodeId) {
        var nodeDataDiv = document.getElementById('monitoring-' + nodeId).querySelector('.monitoring-data');
        var valuesDiv = nodeDataDiv.querySelector('.monitoring-values');
        valuesDiv.innerHTML = '';
    }

    function updateHTMLNode(nodeId, value, timestamp, eventType, portNumber) {
        var monitoringDiv = document.getElementById('monitoring-' + nodeId);
        var nodeDataDiv = document.getElementById('monitoring-' + nodeId).querySelector('.monitoring-details');
        var valuesDiv = nodeDataDiv.querySelector('.monitoring-values');
        var graphicDiv = monitoringDiv.querySelector('.monitoring-graphics');

        if (!checkUserNodeConfigs(nodeId, eventType, portNumber)) return;

        valuesDiv.innerHTML =
            '<span>Time: ' + timestamp.toLocaleTimeString() + '</span><br>' +
            '<span>Value: ' + value + '</span>';

        drawGraphic(nodeId, graphicDiv);
    }

    function drawGraphic(nodeId) {
        var nodeSettings = RED.monitoring.data[nodeId].settings;
        var data = RED.monitoring.data[nodeId][nodeSettings.defaultMessages];

        var values = (Array.isArray(data[0]) ? data[nodeSettings.portNumber] : data);

        var graphicElement = document.getElementById("chart-" + nodeId);
        var ctx = graphicElement.getContext('2d');

        var graphicConfigs = {
            type: 'line',
            data: {
                datasets: [{
                    backgroundColor: 'rgb(255, 99, 132)',
                    borderColor: 'rgb(255, 99, 132)',
                    data: [],
                    fill: false,
                }]
            },
            options: {
                events: [],
                elements: {
                    point: {
                        pointStyle: 'circle',
                    }
                },
                animation: {
                    duration: 0
                },
                legend: {
                    display: false,
                },
                scales: {
                    xAxes: [{
                        type: 'time',
                        distribution: 'linear',
                        time: {
                            unit: 'second'
                        },
                        ticks: {
                            display: false
                        },
                        display: false

                    }],
                    yAxes: [{
                        ticks: {
                            display: false
                        },
                        display: false
                    }]
                }
            }
        };

        var dataParsed = [];
        if (!(values[0] && typeof (values[0].y) == 'number')) {
            graphicConfigs.type = 'scatter';
            graphicConfigs.options.elements.point.pointStyle = 'rectRot';
            dataParsed = values.map(function (value) {
                return {x: value.x, y: 1}
            });
        } else {
            dataParsed = values.map(function (value) {
                return {x: value.x, y: value.y}
            });
        }

        graphicConfigs.data.datasets[0].data = dataParsed.slice((values.length - 10 < 0 ? 0 : values.length - 10), values.length);

        new Chart(ctx, graphicConfigs);
    }

    return {
        injectHTMLIntoNode: injectHTMLIntoNode,
        updateHTMLNode: updateHTMLNode,
        addMonitoringModal: addMonitoringModal
    }
})();